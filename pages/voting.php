<?php
session_start();
require '../config/connection.php';
require '../scripts/functions.php';

if (!isset($_SESSION['user_id'])) {
    header('Location: authorisation.php');
    exit();
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–π —Ñ–∞–∑—ã
$stmt = $pdo->query('SELECT phase FROM rounds ORDER BY round_id DESC LIMIT 1');
$current_phase = $stmt->fetchColumn() ?? 'day';

if ($current_phase !== 'voting') {
    die('–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤–æ –≤—Ä–µ–º—è —Ñ–∞–∑—ã –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è.');
}
//–ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º –∏–≥—Ä–æ–∫–µ
$stmt = $pdo->prepare('SELECT * FROM users WHERE user_id = ?');
$stmt->execute([$_SESSION['user_id']]);
$current_user = $stmt->fetch(PDO::FETCH_ASSOC);

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∂–∏–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
$stmt = $pdo->query('
    SELECT user_id, login, role_id, faction, status, vote_data 
    FROM users 
    WHERE status = "–∂–∏–≤"
');
$users = $stmt->fetchAll(PDO::FETCH_ASSOC);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ POST-–∑–∞–ø—Ä–æ—Å–∞
if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    $response = ['success' => false, 'message' => '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'];

    try {
        //–ø—Ä–æ–≤–µ—Ä—è–µ–º, –≥–æ–ª–æ—Å–æ–≤–∞–ª –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        $stmt = $pdo->prepare('SELECT COUNT(*) FROM votes WHERE user_id = ? AND round = ?');
        $stmt->execute([$_SESSION['user_id'], getCurrentRound($pdo)]);
        if ($stmt->fetchColumn() > 0) {
            throw new Exception('–í—ã —É–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –≤ —ç—Ç–æ–º —Ä–∞—É–Ω–¥–µ!');
        }
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        if (!isset($_POST['vote_type']) || !isset($_POST['target_id'])) {
            throw new Exception('–ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã');
        }

        $vote_type = $_POST['vote_type']; // –¢–∏–ø –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è (role, faction, kill)
        $target_id = (int)$_POST['target_id']; // ID —Ü–µ–ª–∏

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π vote_type
        if (!in_array($vote_type, ['reveal_role', 'reveal_faction', 'kill'])) {
            throw new Exception('–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ç–∏–ø –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è');
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–∏
        $stmt = $pdo->prepare('SELECT user_id FROM users WHERE user_id = ? AND status = ?');
        $stmt->execute([$target_id, '–∂–∏–≤']);
        if (!$stmt->fetchColumn()) {
            throw new Exception('–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä —Ü–µ–ª–∏');
        }

        // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –≥–æ–ª–æ—Å–µ
        $stmt = $pdo->prepare('
            INSERT INTO votes (user_id, target_id, type, round)
            VALUES (?, ?, ?, ?)
        ');
        $stmt->execute([$_SESSION['user_id'], $target_id, $vote_type, getCurrentRound($pdo)]);

        logAction($pdo, $_SESSION['user_id'], 'vote', [
            'target_id' => $target_id,
            'vote_type' => $vote_type
        ]);

        $response = [
            'success' => true,
            'message' => '–í–∞—à –≥–æ–ª–æ—Å –ø—Ä–∏–Ω—è—Ç!'
        ];
    } catch (Exception $e) {
        $response['message'] = $e->getMessage();
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º JSON
    header('Content-Type: application/json');
    echo json_encode($response);
    exit();
}
?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ</title>
    <link rel="stylesheet" href="../graphic/voting.css">
</head>
<body>
    <div class="zombie-container">
        <h1>–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ <span class="zombie-hand">üó≥Ô∏è</span></h1>

        <!-- –§–æ—Ä–º–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è -->
        <div class="voting-form">
            <h2>–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ</h2>
            <form id="voteForm" method="POST">
                <!-- –í—ã–±–æ—Ä —Ç–∏–ø–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è -->
                <div class="vote-options">
                    <label>
                        <input type="radio" name="vote_type" value="reveal_role" required>
                        –†–∞—Å–∫—Ä—ã—Ç—å —Ä–æ–ª—å
                    </label>
                    <label>
                        <input type="radio" name="vote_type" value="reveal_faction">
                        –†–∞—Å–∫—Ä—ã—Ç—å —Ñ—Ä–∞–∫—Ü–∏—é
                    </label>
                    <label>
                        <input type="radio" name="vote_type" value="kill">
                        –£–±–∏—Ç—å –∏–≥—Ä–æ–∫–∞
                    </label>
                </div>

                <!-- –í—ã–±–æ—Ä –∏–≥—Ä–æ–∫–∞ -->
                <select name="target_id" required>
                    <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–∞</option>
                    <?php
                    $stmt = $pdo->prepare('SELECT user_id, login FROM users WHERE status = ?');
                    $stmt->execute(['–∂–∏–≤']);
                    while ($user = $stmt->fetch()):
                    ?>
                        <option value="<?= $user['user_id'] ?>">
                            <?= htmlspecialchars($user['login']) ?>
                        </option>
                    <?php endwhile; ?>
                </select>

                <button type="submit">–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–æ–ª–æ—Å</button>
            </form>
            <div id="voteResult"></div>
        </div>

        <!-- –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–∞—Å–∫—Ä—ã—Ç–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ -->
        <div class="revealed-info">
            <h2>–†–∞—Å–∫—Ä—ã—Ç–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±–æ –º–Ω–µ:</h2>
            <div class="user-info">
                <strong><?= htmlspecialchars($current_user['name']) ?>:</strong>
                <?php
                $vote_data = json_decode($current_user['vote_data'], true) ?? [];
                if (empty($vote_data)) {
                    echo '<em>–ù–µ—Ç —Ä–∞—Å–∫—Ä—ã—Ç–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏</em>';
                } else {
                    if (isset($vote_data['role'])) {
                        echo '<div><span class="label">–†–æ–ª—å —Ä–∞—Å–∫—Ä—ã—Ç–∞:</span> </div>';
                    }
                    if (isset($vote_data['faction'])) {
                        echo '<div><span class="label">–§—Ä–∞–∫—Ü–∏—è —Ä–∞—Å–∫—Ä—ã—Ç–∞:</span> </div>';
                    }
                    if (isset($vote_data['status'])) {
                        echo '<div><span class="label">–°—Ç–∞—Ç—É—Å —Ä–∞—Å–∫—Ä—ã—Ç:</span> </div>';
                    }
                }
                ?>
        </div>

        <a href="../lk/personal_area.php">
            <button class="back-btn">–ù–∞–∑–∞–¥</button>
        </a>
    </div>
    <script>
        document.getElementById('voteForm').addEventListener('submit', async (e) => {
            e.preventDefault();
            const formData = new FormData(e.target);

            try {
                const response = await fetch('voting.php', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                    body: new URLSearchParams(formData)
                });

                const result = await response.json();
                const resultDiv = document.getElementById('voteResult');
                resultDiv.textContent = result.message;
                resultDiv.className = result.success ? 'success' : 'error';
            } catch (error) {
                console.error(error);
                alert('–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞');
            }
        });
    </script>
</body>
</html>